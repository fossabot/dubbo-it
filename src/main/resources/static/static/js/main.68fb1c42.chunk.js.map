{"version":3,"sources":["components/Navigation.tsx","components/Services.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Header","Navigation","react_default","a","createElement","className","tagName","menu","theme","mode","defaultSelectedKeys","style","lineHeight","Item","key","Component","SubMenu","Sider","Services","width","defaultOpenKeys","height","borderRight","title","icon","type","App","layout","components_Navigation","components_Services","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"yOAGQA,aAiBOC,mLAbX,OACEC,EAAAC,EAAAC,cAACJ,EAAD,CAAQK,UAAU,SAASC,QAAQ,UACjCJ,EAAAC,EAAAC,cAAA,OAAKC,UAAU,SACfH,EAAAC,EAAAC,cAAAG,EAAA,GAAMC,MAAM,OAAOC,KAAK,aAAaC,oBAAqB,CAAC,KAAMC,MAAO,CAAEC,WAAY,SACpFV,EAAAC,EAAAC,cAAAG,EAAA,EAAMM,KAAN,CAAWC,IAAI,KAAf,SACAZ,EAAAC,EAAAC,cAAAG,EAAA,EAAMM,KAAN,CAAWC,IAAI,KAAf,SACAZ,EAAAC,EAAAC,cAAAG,EAAA,EAAMM,KAAN,CAAWC,IAAI,KAAf,kBAReC,8BCFjBC,cACAC,YAuBOC,mLAnBX,OACEhB,EAAAC,EAAAC,cAACa,EAAD,CAAOE,MAAO,KACZjB,EAAAC,EAAAC,cAAAG,EAAA,GAAME,KAAK,SAASC,oBAAqB,CAAC,KAAMU,gBAAiB,CAAC,QAAST,MAAO,CAAEU,OAAQ,OAAQC,YAAa,IAC/GpB,EAAAC,EAAAC,cAACY,EAAD,CAASF,IAAI,OAAOS,MAAOrB,EAAAC,EAAAC,cAAA,YAAMF,EAAAC,EAAAC,cAAAoB,EAAA,GAAMC,KAAK,SAAjB,aACzBvB,EAAAC,EAAAC,cAAAG,EAAA,EAAMM,KAAN,CAAWC,IAAI,KAAf,WACAZ,EAAAC,EAAAC,cAAAG,EAAA,EAAMM,KAAN,CAAWC,IAAI,KAAf,WACAZ,EAAAC,EAAAC,cAAAG,EAAA,EAAMM,KAAN,CAAWC,IAAI,KAAf,YAEFZ,EAAAC,EAAAC,cAACY,EAAD,CAASF,IAAI,OAAOS,MAAOrB,EAAAC,EAAAC,cAAA,YAAMF,EAAAC,EAAAC,cAAAoB,EAAA,GAAMC,KAAK,WAAjB,aACzBvB,EAAAC,EAAAC,cAAAG,EAAA,EAAMM,KAAN,CAAWC,IAAI,KAAf,WACAZ,EAAAC,EAAAC,cAAAG,EAAA,EAAMM,KAAN,CAAWC,IAAI,KAAf,WACAZ,EAAAC,EAAAC,cAAAG,EAAA,EAAMM,KAAN,CAAWC,IAAI,KAAf,qBAbWC,aCaRW,2LAXX,OACExB,EAAAC,EAAAC,cAAAuB,EAAA,GAAQrB,QAAQ,QACdJ,EAAAC,EAAAC,cAACwB,EAAD,MACA1B,EAAAC,EAAAC,cAAAuB,EAAA,GAAQrB,QAAQ,WACdJ,EAAAC,EAAAC,cAACyB,EAAD,eANQd,cCMEe,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOlC,EAAAC,EAAAC,cAACiC,EAAD,MAASC,SAASC,eAAe,SDmI3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.68fb1c42.chunk.js","sourcesContent":["import { Layout, Menu } from 'antd'\nimport React, { Component } from 'react'\n\nconst { Header } = Layout\n\nclass Navigation extends Component {\n  render(): React.ReactNode {\n    return (\n      <Header className=\"header\" tagName=\"header\">\n        <div className=\"logo\"></div>\n        <Menu theme=\"dark\" mode=\"horizontal\" defaultSelectedKeys={['2']} style={{ lineHeight: '64px' }}>\n          <Menu.Item key=\"1\">nav 1</Menu.Item>\n          <Menu.Item key=\"2\">nav 2</Menu.Item>\n          <Menu.Item key=\"3\">nav 3</Menu.Item>\n        </Menu>\n      </Header>\n    )\n  }\n}\n\nexport default Navigation\n","import { Icon, Layout, Menu } from 'antd'\nimport React, { Component } from 'react'\n\nconst { SubMenu } = Menu\nconst { Sider } = Layout\n\nclass Services extends Component {\n  render(): React.ReactNode {\n    return (\n      <Sider width={200}>\n        <Menu mode=\"inline\" defaultSelectedKeys={['1']} defaultOpenKeys={['sub1']} style={{ height: '100%', borderRight: 0 }}>\n          <SubMenu key=\"sub1\" title={<span><Icon type=\"user\" />subnav 1</span>}>\n            <Menu.Item key=\"1\">option1</Menu.Item>\n            <Menu.Item key=\"2\">option2</Menu.Item>\n            <Menu.Item key=\"3\">option3</Menu.Item>\n          </SubMenu>\n          <SubMenu key=\"sub2\" title={<span><Icon type=\"laptop\" />subnav 2</span>}>\n            <Menu.Item key=\"4\">option4</Menu.Item>\n            <Menu.Item key=\"5\">option5</Menu.Item>\n            <Menu.Item key=\"6\">option6</Menu.Item>\n          </SubMenu>\n        </Menu>\n      </Sider>\n    )\n  }\n}\n\nexport default Services\n","import React, { Component } from 'react'\nimport { Layout } from 'antd'\nimport Navigation from './components/Navigation'\nimport Services from './components/Services'\nimport './App.css'\n\nclass App extends Component {\n  render() {\n    return (\n      <Layout tagName=\"main\">\n        <Navigation/>\n        <Layout tagName=\"section\">\n          <Services/>\n        </Layout>\n      </Layout>\n    )\n  }\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n)\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void\n  onUpdate?: (registration: ServiceWorkerRegistration) => void\n}\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    )\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets see https://github.com/facebook/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          )\n        })\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config)\n      }\n    })\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        if (installingWorker == null) {\n          return\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              )\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration)\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.')\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration)\n              }\n            }\n          }\n        }\n      }\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error)\n    })\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type')\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config)\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      )\n    })\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister()\n    })\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(<App />, document.getElementById('root'))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}