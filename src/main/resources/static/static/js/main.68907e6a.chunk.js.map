{"version":3,"sources":["components/Body.tsx","components/RegistryForm.tsx","components/Navigation.tsx","components/Registries.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Content","Body","react_default","a","createElement","Component","RegistryForm","handleSubmit","e","preventDefault","_this","props","form","validateFields","error","values","fetch","body","JSON","stringify","headers","Content-Type","method","then","response","json","console","log","catch","err","getFieldDecorator","this","es_form","onSubmit","Item","label","rules","required","message","input","type","es_button","htmlType","className","components_RegistryForm","create","Header","Navigation","state","isRegistryModalVisible","menu","onClick","handleMenuClick","key","clickParam","showRegistryModal","setState","handleRegistryModalCancel","dropdown","overlay","icon","modal","title","visible","onCancel","footer","SubMenu","Sider","Registries","width","mode","defaultSelectedKeys","defaultOpenKeys","App","layout","components_Navigation","components_Registries","components_Body","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"2TAGQA,uBAYOC,mLARX,OACEC,EAAAC,EAAAC,cAACJ,EAAD,uBAHaK,qICAbC,qNAiCIC,aAAe,SAACC,GACtBA,EAAEC,iBAEFC,EAAKC,MAAMC,KAAKC,eAAe,SAACC,EAAOC,GAChCD,GACHE,MAAM,cAAe,CACnBC,KAAMC,KAAKC,UAAUJ,GACrBK,QAAS,CACPC,eAAgB,oBAElBC,OAAQ,SACPC,KAAK,SAACC,GAAD,OAAcA,EAASC,SAC5BF,KAAK,SAACE,GAAD,OAAUC,QAAQC,IAAIF,KAC3BG,MAAM,SAACC,GAAD,OAASH,QAAQZ,MAAMe,gFA7CL,IACvBC,EAAsBC,KAAKpB,MAAMC,KAAjCkB,kBAER,OACE5B,EAAAC,EAAAC,cAAA4B,EAAA,GAAMC,SAAUF,KAAKxB,cACnBL,EAAAC,EAAAC,cAAA4B,EAAA,EAAME,KAAN,CAAWC,MAAM,QACdL,EAAkB,OAAQ,CACzBM,MAAO,CAAC,CAAEC,UAAU,EAAMC,QAAS,sBADpCR,CAGC5B,EAAAC,EAAAC,cAAAmC,EAAA,UAGJrC,EAAAC,EAAAC,cAAA4B,EAAA,EAAME,KAAN,CAAWC,MAAM,WACdL,EAAkB,UAAW,CAC5BM,MAAO,CAAC,CAAEC,UAAU,EAAMC,QAAS,yBADpCR,CAGC5B,EAAAC,EAAAC,cAAAmC,EAAA,UAGJrC,EAAAC,EAAAC,cAAA4B,EAAA,EAAME,KAAN,CAAWC,MAAM,YACfjC,EAAAC,EAAAC,cAAAmC,EAAA,SAEFrC,EAAAC,EAAAC,cAAA4B,EAAA,EAAME,KAAN,CAAWC,MAAM,YACfjC,EAAAC,EAAAC,cAAAmC,EAAA,GAAOC,KAAK,cAEdtC,EAAAC,EAAAC,cAAA4B,EAAA,EAAME,KAAN,KACEhC,EAAAC,EAAAC,cAAAqC,EAAA,GAAQD,KAAK,UAAUE,SAAS,SAASC,UAAU,wBAAnD,mBA3BiBtC,cAoDZuC,EAAAZ,EAAA,EAAKa,QAAL,CAAkCvC,GCpDzCwC,aAuDOC,6MApDNC,MAAQ,CAAEC,wBAAwB,KAoBjCC,KAAwB,WAC9B,OACEhD,EAAAC,EAAAC,cAAA8C,EAAA,GAAMC,QAASzC,EAAK0C,iBAClBlD,EAAAC,EAAAC,cAAA8C,EAAA,EAAMhB,KAAN,CAAWmB,IAAI,KAAf,gBAKED,gBAAkB,SAACE,GACzB,OAAQA,EAAWD,KACjB,IAAK,IACH3C,EAAK6C,wBAQHA,kBAAoB,WAC1B7C,EAAK8C,SAAS,CACZP,wBAAwB,OAIpBQ,0BAA4B,SAACjD,GACnCE,EAAK8C,SAAS,CACZP,wBAAwB,6EA5C1B,OACE/C,EAAAC,EAAAC,cAAC0C,EAAD,CAAQH,UAAU,UAChBzC,EAAAC,EAAAC,cAAAsD,EAAA,GAAUC,QAAS5B,KAAKmB,MACtBhD,EAAAC,EAAAC,cAAAqC,EAAA,GAAQD,KAAK,WAAb,MAA0BtC,EAAAC,EAAAC,cAAAwD,EAAA,GAAMpB,KAAK,iBAEvCtC,EAAAC,EAAAC,cAAAyD,EAAA,GACEC,MAAM,eACNC,QAAShC,KAAKiB,MAAMC,uBACpBe,SAAUjC,KAAK0B,0BACfQ,OAAQ,MAER/D,EAAAC,EAAAC,cAACwC,EAAD,eAfevC,aCHjB6D,uBACAC,YA4BOC,mLAxBX,OACElE,EAAAC,EAAAC,cAAC+D,EAAD,CAAOE,MAAO,KACZnE,EAAAC,EAAAC,cAAA8C,EAAA,GACEoB,KAAK,SACLC,oBAAqB,CAAC,KACtBC,gBAAiB,CAAC,QAClB7B,UAAU,cAEVzC,EAAAC,EAAAC,cAAC8D,EAAD,CAASb,IAAI,OAAOS,MAAO5D,EAAAC,EAAAC,cAAA,yBACzBF,EAAAC,EAAAC,cAAA8C,EAAA,EAAMhB,KAAN,CAAWmB,IAAI,KAAf,WACAnD,EAAAC,EAAAC,cAAA8C,EAAA,EAAMhB,KAAN,CAAWmB,IAAI,KAAf,WACAnD,EAAAC,EAAAC,cAAA8C,EAAA,EAAMhB,KAAN,CAAWmB,IAAI,KAAf,YAEFnD,EAAAC,EAAAC,cAAC8D,EAAD,CAASb,IAAI,OAAOS,MAAO5D,EAAAC,EAAAC,cAAA,yBACzBF,EAAAC,EAAAC,cAAA8C,EAAA,EAAMhB,KAAN,CAAWmB,IAAI,KAAf,WACAnD,EAAAC,EAAAC,cAAA8C,EAAA,EAAMhB,KAAN,CAAWmB,IAAI,KAAf,WACAnD,EAAAC,EAAAC,cAAA8C,EAAA,EAAMhB,KAAN,CAAWmB,IAAI,KAAf,qBAlBahD,aCcVoE,mLAZX,OACEvE,EAAAC,EAAAC,cAAAsE,EAAA,OACExE,EAAAC,EAAAC,cAACuE,EAAD,MACAzE,EAAAC,EAAAC,cAAAsE,EAAA,OACExE,EAAAC,EAAAC,cAACwE,EAAD,MACA1E,EAAAC,EAAAC,cAACyE,EAAD,eAPQxE,oBCKEyE,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOlF,EAAAC,EAAAC,cAACiF,EAAD,MAASC,SAASC,eAAe,SDmI3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMnE,KAAK,SAACoE,GAClCA,EAAaC","file":"static/js/main.68907e6a.chunk.js","sourcesContent":["import { Layout } from 'antd'\nimport React, { Component } from 'react'\n\nconst { Content } = Layout\n\nclass Body extends Component {\n  public render(): React.ReactNode {\n    return (\n      <Content>\n        Content\n      </Content>\n    )\n  }\n}\n\nexport default Body\n","import { Button, Form, Input } from 'antd'\nimport { FormComponentProps } from 'antd/es/form'\nimport React, { Component, FormEvent } from 'react'\nimport '../css/registry-form.css'\n\nclass RegistryForm extends Component<FormComponentProps> {\n  public render(): React.ReactNode {\n    const { getFieldDecorator } = this.props.form\n\n    return (\n      <Form onSubmit={this.handleSubmit}>\n        <Form.Item label=\"Name\">\n          {getFieldDecorator('name', {\n            rules: [{ required: true, message: 'Name is required' }],\n          })(\n            <Input />,\n          )}\n        </Form.Item>\n        <Form.Item label=\"Address\">\n          {getFieldDecorator('address', {\n            rules: [{ required: true, message: 'Address is required' }],\n          })(\n            <Input />,\n          )}\n        </Form.Item>\n        <Form.Item label=\"Username\">\n          <Input />\n        </Form.Item>\n        <Form.Item label=\"Password\">\n          <Input type=\"password\" />\n        </Form.Item>\n        <Form.Item>\n          <Button type=\"primary\" htmlType=\"submit\" className=\"registry-form-submit\">Submit</Button>\n        </Form.Item>\n      </Form>\n    )\n  }\n\n  private handleSubmit = (e: FormEvent<any>) => {\n    e.preventDefault()\n\n    this.props.form.validateFields((error, values) => {\n      if (!error) {\n        fetch('/registries', {\n          body: JSON.stringify(values),\n          headers: {\n            'Content-Type': 'application/json',\n          },\n          method: 'POST',\n        }).then((response) => response.json())\n          .then((json) => console.log(json))\n          .catch((err) => console.error(err))\n      }\n    })\n  }\n}\n\nexport default Form.create<FormComponentProps>()(RegistryForm)\n","import { Button, Dropdown, Icon, Layout, Menu, Modal } from 'antd'\nimport { ClickParam } from 'antd/es/menu'\nimport React, { Component } from 'react'\nimport RegistryForm from './RegistryForm'\n\nconst { Header } = Layout\n\nclass Navigation extends Component {\n  public state = { isRegistryModalVisible: false }\n\n  public render(): React.ReactNode {\n    return (\n      <Header className=\"header\">\n        <Dropdown overlay={this.menu}>\n          <Button type=\"primary\">New<Icon type=\"caret-down\" /></Button>\n        </Dropdown>\n        <Modal\n          title=\"New Registry\"\n          visible={this.state.isRegistryModalVisible}\n          onCancel={this.handleRegistryModalCancel}\n          footer={null}\n        >\n          <RegistryForm />\n        </Modal>\n      </Header>\n    )\n  }\n\n  private menu: React.ReactNode = () => {\n    return (\n      <Menu onClick={this.handleMenuClick}>\n        <Menu.Item key=\"1\">Registry</Menu.Item>\n      </Menu>\n    )\n  }\n\n  private handleMenuClick = (clickParam: ClickParam) => {\n    switch (clickParam.key) {\n      case '1':\n        this.showRegistryModal()\n\n        break\n      default:\n        break\n    }\n  }\n\n  private showRegistryModal = () => {\n    this.setState({\n      isRegistryModalVisible: true,\n    })\n  }\n\n  private handleRegistryModalCancel = (e: React.MouseEvent<any>) => {\n    this.setState({\n      isRegistryModalVisible: false,\n    })\n  }\n}\n\nexport default Navigation\n","import { Layout, Menu } from 'antd'\nimport React, { Component } from 'react'\nimport '../css/registries.css'\n\nconst { SubMenu } = Menu\nconst { Sider } = Layout\n\nclass Registries extends Component {\n  public render(): React.ReactNode {\n    return (\n      <Sider width={200}>\n        <Menu\n          mode=\"inline\"\n          defaultSelectedKeys={['1']}\n          defaultOpenKeys={['sub1']}\n          className=\"registries\"\n        >\n          <SubMenu key=\"sub1\" title={<span>subnav 1</span>}>\n            <Menu.Item key=\"1\">option1</Menu.Item>\n            <Menu.Item key=\"2\">option2</Menu.Item>\n            <Menu.Item key=\"3\">option3</Menu.Item>\n          </SubMenu>\n          <SubMenu key=\"sub2\" title={<span>subnav 2</span>}>\n            <Menu.Item key=\"4\">option4</Menu.Item>\n            <Menu.Item key=\"5\">option5</Menu.Item>\n            <Menu.Item key=\"6\">option6</Menu.Item>\n          </SubMenu>\n        </Menu>\n      </Sider>\n    )\n  }\n}\n\nexport default Registries\n","import { Layout } from 'antd'\nimport React, { Component } from 'react'\nimport './App.css'\nimport Body from './components/Body'\nimport Navigation from './components/Navigation'\nimport Registries from './components/Registries'\n\nclass App extends Component {\n  public render() {\n    return (\n      <Layout>\n        <Navigation />\n        <Layout>\n          <Registries />\n          <Body />\n        </Layout>\n      </Layout>\n    )\n  }\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/,\n    ),\n)\n\ninterface IConfig {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void\n  onUpdate?: (registration: ServiceWorkerRegistration) => void\n}\n\nexport function register(config?: IConfig) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href,\n    )\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets see https://github.com/facebook/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA',\n          )\n        })\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config)\n      }\n    })\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: IConfig) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        if (installingWorker == null) {\n          return\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.',\n              )\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration)\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.')\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration)\n              }\n            }\n          }\n        }\n      }\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error)\n    })\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: IConfig) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type')\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config)\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.',\n      )\n    })\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then((registration) => {\n      registration.unregister()\n    })\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\nimport './css/index.css'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(<App />, document.getElementById('root'))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}